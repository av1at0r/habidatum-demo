{"version":3,"sources":["features/BikeRides/components/BikeHighlightedPointsLayer.tsx","features/BikeRides/components/BikePointsLayer.tsx","features/BikeRides/components/BikePointsSource.tsx","features/BikeRides/components/BikeStationsNamesLayer.tsx","features/BikeRides/components/BikeRidesMap.tsx","features/Map/hooks/useMapViewport.ts","features/BikeRides/hooks/useBikeRidesCenter.ts","constants.ts","features/BikeRides/components/BikeRidesTableHeader.tsx","features/BikeRides/components/BikeRidesTableRow.tsx","utils/camelize.ts","features/BikeRides/data/bikesTransformFunctions.ts","utils/createCsvTransformerFunction.ts","features/BikeRides/hooks/useBikeRidesData.ts","features/BikeRides/views/BikeRidesView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["pointPaint","BikeHighlightedPointsLayer","rides","selectedRide","props","scale","useMemo","minRideDuration","Math","min","map","item","tripduration","maxRideDuration","max","paint","type","BikePointsLayer","BikePointsSource","children","points","result","features","forEach","point","push","geometry","coordinates","startStationLongitude","startStationLatitude","properties","title","startStationName","endStationLongitude","endStationLatitude","endStationName","data","BikeStationsNamesLayer","layout","defaultRides","BikeRidesMap","className","initialState","useState","latitude","longitude","zoom","viewState","setViewState","viewStateRef","useRef","useEffect","current","setPartialViewportState","useCallback","handleViewChanged","newViewState","useMapViewport","center","length","longs","lats","minLong","maxLong","minLat","useBikeRidesCenter","selectedRidesData","undefined","mapboxApiAccessToken","process","mapStyle","width","height","onViewStateChange","BikeRidesTableHeader","TableHead","TableRow","TableCell","BikeRidesTableRow","ride","onMouseEnter","onMouseLeave","HumanizeDuration","units","handleMouseEnter","starttime","toLocaleString","stoptime","camelize","str","replace","word","index","toLowerCase","toUpperCase","transfomerFunctions","transform","value","Date","key","transofrmFunction","useBikeRidesData","setData","Promise","resolve","reject","parse","download","dynamicTyping","complete","error","header","transformHeader","then","useStyles","makeStyles","theme","createStyles","root","display","tableWrapper","maxHeight","overflowY","flexShrink","mapWrapper","position","flexGrow","left","top","BikeRidesView","classes","setSelectedRide","clearSelection","Table","TableBody","toISOString","bikeid","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.183c5d53.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Layer, LayerProps } from \"react-map-gl\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\nconst pointPaint: Layer[\"props\"][\"paint\"] = {\r\n  \"circle-radius\": 7,\r\n  \"circle-color\": \"#FF0000\",\r\n};\r\n\r\ntype Props = {\r\n  rides: BikeRideTransformed[];\r\n  selectedRide: BikeRideTransformed;\r\n} & Omit<LayerProps, \"type\" | \"paint\">;\r\n\r\nconst BikeHighlightedPointsLayer = ({ rides, selectedRide, ...props }: Props) => {\r\n  const scale = useMemo(() => {\r\n    const minRideDuration = Math.min(...rides.map((item) => item.tripduration));\r\n    const maxRideDuration = Math.max(...rides.map((item) => item.tripduration));\r\n\r\n    return (\r\n      ((selectedRide.tripduration - minRideDuration) /\r\n        (maxRideDuration - minRideDuration)) *\r\n        (2 - 1) +\r\n      1\r\n    );\r\n  }, [rides, selectedRide.tripduration]);\r\n\r\n  const paint = useMemo(() => {\r\n    return {\r\n      ...pointPaint,\r\n      \"circle-radius\": (pointPaint[\"circle-radius\"] as number) * scale,\r\n    };\r\n  }, [scale]);\r\n\r\n  return <Layer {...props} type=\"circle\" paint={paint} />;\r\n};\r\n\r\nexport default BikeHighlightedPointsLayer;\r\n","import React from \"react\";\r\nimport { Layer, LayerProps } from \"react-map-gl\";\r\n\r\nconst pointPaint: Layer[\"props\"][\"paint\"] = {\r\n  \"circle-radius\": 5,\r\n  \"circle-color\": \"#007cbf\",\r\n};\r\n\r\nconst BikePointsLayer = (props: Omit<LayerProps, 'type' | 'paint'>) => {\r\n  return <Layer {...props} type=\"circle\" paint={pointPaint} />;\r\n};\r\n\r\nexport default BikePointsLayer;\r\n","import React, { PropsWithChildren, useMemo } from \"react\";\r\nimport { Source } from \"react-map-gl\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\ntype Props = PropsWithChildren<{\r\n  rides: BikeRideTransformed[];\r\n}>;\r\n\r\nexport default function BikePointsSource({ rides, children }: Props) {\r\n  const points = useMemo(() => {\r\n    const result: GeoJSON.FeatureCollection = {\r\n      type: \"FeatureCollection\",\r\n      features: [],\r\n    };\r\n    rides.forEach((point) => {\r\n      result.features.push({\r\n        type: \"Feature\",\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: [\r\n            point.startStationLongitude,\r\n            point.startStationLatitude,\r\n          ],\r\n        },\r\n        properties: {\r\n          title: point.startStationName,\r\n        },\r\n      });\r\n      result.features.push({\r\n        type: \"Feature\",\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: [point.endStationLongitude, point.endStationLatitude],\r\n        },\r\n        properties: {\r\n          title: point.endStationName,\r\n        },\r\n      });\r\n    });\r\n    return result;\r\n  }, [rides]);\r\n\r\n  return (\r\n    <Source type=\"geojson\" data={points}>\r\n      {children}\r\n    </Source>\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport { Layer, LayerProps } from \"react-map-gl\";\r\n\r\ntype Props = Omit<LayerProps, \"type\" | \"paint\"> & {\r\n  paint?: LayerProps[\"paint\"];\r\n};\r\n\r\nexport const BikeStationsNamesLayer = ({ layout, paint, ...props }: Props) => {\r\n  layout = useMemo(\r\n    () => ({\r\n      \"text-field\": [\"get\", \"title\"],\r\n      \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n      \"text-offset\": [0, 2],\r\n      \"text-anchor\": \"bottom\",\r\n\r\n      ...layout,\r\n    }),\r\n    [layout]\r\n  );\r\n  paint = useMemo(\r\n    () => ({\r\n      \"text-halo-color\": \"rgba(255, 255, 255, 0.8)\",\r\n      \"text-halo-width\": 10,\r\n      ...paint,\r\n    }),\r\n    [paint]\r\n  );\r\n\r\n  return <Layer {...props} type=\"symbol\" layout={layout} paint={paint} />;\r\n};\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\nimport { mapboxToken } from \"../../../constants\";\r\nimport useMapViewport from \"../../Map/hooks/useMapViewport\";\r\nimport useBikeRidesCenter from \"../hooks/useBikeRidesCenter\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\nimport BikeHighlightedPointsLayer from \"./BikeHighlightedPointsLayer\";\r\nimport BikePointsLayer from \"./BikePointsLayer\";\r\nimport BikePointsSource from \"./BikePointsSource\";\r\nimport { BikeStationsNamesLayer } from \"./BikeStationsNamesLayer\";\r\n\r\ninterface Props {\r\n  rides?: BikeRideTransformed[];\r\n  selectedRide?: BikeRideTransformed;\r\n  className?: string;\r\n}\r\n\r\nconst defaultRides: BikeRideTransformed[] = [];\r\n\r\nexport const BikeRidesMap = ({\r\n  rides = defaultRides,\r\n  selectedRide,\r\n  className,\r\n}: Props) => {\r\n  const {\r\n    viewState,\r\n    handleViewChanged,\r\n    setPartialViewportState,\r\n  } = useMapViewport({ zoom: 11 });\r\n\r\n  const center = useBikeRidesCenter(rides);\r\n  useEffect(() => {\r\n    if (center) {\r\n      setPartialViewportState(center);\r\n    }\r\n  }, [center, setPartialViewportState]);\r\n\r\n  const selectedRidesData = useMemo(\r\n    () => (selectedRide ? [selectedRide] : undefined),\r\n    [selectedRide]\r\n  );\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewState}\r\n      mapboxApiAccessToken={mapboxToken}\r\n      mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n      width=\"100%\"\r\n      height=\"100%\"\r\n      className={className}\r\n      onViewStateChange={handleViewChanged}\r\n    >\r\n      <BikePointsSource rides={rides}>\r\n        <BikePointsLayer />\r\n      </BikePointsSource>\r\n      {selectedRidesData && selectedRide && (\r\n        <>\r\n          <BikePointsSource rides={selectedRidesData}>\r\n            <BikeHighlightedPointsLayer\r\n              rides={rides}\r\n              selectedRide={selectedRide}\r\n            />\r\n          </BikePointsSource>\r\n          <BikePointsSource rides={selectedRidesData}>\r\n            <BikeStationsNamesLayer />\r\n          </BikePointsSource>\r\n        </>\r\n      )}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { ContextViewStateChangeInfo, ViewState } from \"react-map-gl\";\r\n\r\nexport default function useMapViewport(initialState?: Partial<ViewState>) {\r\n  const [viewState, setViewState] = useState<ViewState>({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    zoom: 5,\r\n    ...initialState,\r\n  });\r\n\r\n  const viewStateRef = useRef(viewState);\r\n\r\n  useEffect(() => {\r\n    viewStateRef.current = viewState;\r\n  }, [viewState]);\r\n\r\n  const setPartialViewportState = useCallback(\r\n    (viewState: Partial<ViewState>) => {\r\n      setViewState({\r\n        ...viewStateRef.current,\r\n        ...viewState,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleViewChanged = useCallback(\r\n    (viewState: ContextViewStateChangeInfo) => {\r\n      setViewState({\r\n        ...viewState.viewState,\r\n        ...viewState.newViewState,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  return {\r\n    viewState,\r\n    setViewState,\r\n    handleViewChanged,\r\n    setPartialViewportState,\r\n  };\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\nexport default function useBikeRidesCenter(rides: BikeRideTransformed[]) {\r\n  return useMemo(() => {\r\n    if (rides.length === 0) {\r\n      return;\r\n    }\r\n    const longs = [\r\n      ...rides.map((item) => item.startStationLongitude),\r\n      ...rides.map((item) => item.endStationLongitude),\r\n    ];\r\n    const lats = [\r\n      ...rides.map((item) => item.startStationLatitude),\r\n      ...rides.map((item) => item.endStationLatitude),\r\n    ];\r\n    const minLong = Math.min(...longs);\r\n    const maxLong = Math.max(...longs);\r\n\r\n    const minLat = Math.min(...lats);\r\n    const maxLat = Math.max(...lats);\r\n\r\n    return {\r\n      latitude: minLat + (maxLat - minLat) / 2,\r\n      longitude: minLong + (maxLong - minLong) / 2,\r\n    };\r\n  }, [rides]);\r\n}\r\n","export const mapboxToken = process.env.REACT_APP_MAPBOX_TOKEN!;\r\n","import { TableCell, TableHead, TableRow } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport const BikeRidesTableHeader = () => {\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell>Время начала поездки</TableCell>\r\n        <TableCell>Точка отправления</TableCell>\r\n        <TableCell>Время окончания поездки</TableCell>\r\n        <TableCell>Точка прибытия</TableCell>\r\n        <TableCell>Продолжительность поездки</TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n};\r\n","import { TableCell, TableRow } from \"@material-ui/core\";\r\nimport HumanizeDuration from \"humanize-duration\";\r\nimport React, { useCallback, useMemo } from \"react\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\ntype Props = {\r\n  ride: BikeRideTransformed;\r\n\r\n  onMouseEnter: (ride: BikeRideTransformed) => void;\r\n  onMouseLeave: () => void;\r\n};\r\n\r\nexport const BikeRidesTableRow = ({\r\n  ride,\r\n\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n}: Props) => {\r\n  const tripduration = useMemo(\r\n    () =>\r\n      HumanizeDuration(ride.tripduration * 60 * 1000, {\r\n        units: [\"d\", \"h\", \"m\"],\r\n      }),\r\n    [ride.tripduration]\r\n  );\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    onMouseEnter(ride);\r\n  }, [onMouseEnter, ride]);\r\n\r\n  return (\r\n    <TableRow onMouseEnter={handleMouseEnter} onMouseLeave={onMouseLeave}>\r\n      <TableCell>{ride.starttime.toLocaleString()}</TableCell>\r\n      <TableCell>{ride.startStationName}</TableCell>\r\n      <TableCell>{ride.stoptime.toLocaleString()}</TableCell>\r\n      <TableCell>{ride.endStationName}</TableCell>\r\n      <TableCell>{tripduration}</TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n","export default function camelize(str: string) {\r\n  return str\r\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\r\n      return index === 0 ? word.toLowerCase() : word.toUpperCase();\r\n    })\r\n    .replace(/\\s+/g, \"\");\r\n}\r\n","import { TransformerFunctions } from \"../../../interfaces/transformer.interfaces\";\r\nimport { BikeRide } from \"../interfaces/bike-rides.interfaces\";\r\n\r\nexport const bikesTransformFunctions: TransformerFunctions<keyof BikeRide> = {\r\n  starttime: (value: string) => new Date(value),\r\n  stoptime: (value: string) => new Date(value),\r\n};\r\n","import {\r\n  TransformerFunctionKey,\r\n  TransformerFunctions\r\n} from \"../interfaces/transformer.interfaces\";\r\n\r\nexport default function createCsvTransformerFunction<\r\n  T extends TransformerFunctionKey\r\n>(transfomerFunctions: TransformerFunctions<T>) {\r\n  return (value: any, key: T) => {\r\n    const transofrmFunction = transfomerFunctions[key];\r\n    if (transofrmFunction) {\r\n      return transofrmFunction(value);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n","import { parse, ParseResult } from \"papaparse\";\r\nimport { useEffect, useState } from \"react\";\r\nimport camelize from \"../../../utils/camelize\";\r\nimport createCsvTransformerFunction from \"../../../utils/createCsvTransformerFunction\";\r\nimport { bikesTransformFunctions } from \"../data/bikesTransformFunctions\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\nexport const BIKE_RIDES_KEY = \"bike-rides\";\r\n\r\nconst transform = createCsvTransformerFunction(bikesTransformFunctions);\r\n\r\nfunction fetchBikeRidesData() {\r\n  return new Promise<ParseResult<BikeRideTransformed>>((resolve, reject) => {\r\n    parse<BikeRideTransformed>(`${process.env.PUBLIC_URL}/bike-rides.csv`, {\r\n      download: true,\r\n      dynamicTyping: true,\r\n      complete: resolve,\r\n      error: reject,\r\n      header: true,\r\n      transformHeader: camelize,\r\n      transform,\r\n    });\r\n  });\r\n}\r\n\r\nexport default function useBikeRidesData() {\r\n  const [data, setData] = useState<ParseResult<BikeRideTransformed>>();\r\n  useEffect(() => {\r\n    fetchBikeRidesData().then((result) => setData(result));\r\n  }, []);\r\n  return { data };\r\n}\r\n","import { createStyles, makeStyles, Table, TableBody } from \"@material-ui/core\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { BikeRidesMap } from \"../components/BikeRidesMap\";\r\nimport { BikeRidesTableHeader } from \"../components/BikeRidesTableHeader\";\r\nimport { BikeRidesTableRow } from \"../components/BikeRidesTableRow\";\r\nimport useBikeRidesData from \"../hooks/useBikeRidesData\";\r\nimport { BikeRideTransformed } from \"../interfaces/bike-rides.interfaces\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    tableWrapper: {\r\n      width: \"50%\",\r\n      maxHeight: \"100vh\",\r\n      overflowY: \"auto\",\r\n      flexShrink: 0,\r\n    },\r\n    mapWrapper: {\r\n      position: \"relative\",\r\n      flexShrink: 0,\r\n      flexGrow: 1,\r\n    },\r\n    map: {\r\n      position: \"absolute\",\r\n      left: 0,\r\n      top: 0,\r\n      width: \"100%\",\r\n      height: \"100vh\",\r\n    },\r\n  })\r\n);\r\n\r\nexport default function BikeRidesView() {\r\n  const { data } = useBikeRidesData();\r\n\r\n  const classes = useStyles();\r\n  const [selectedRide, setSelectedRide] = useState<BikeRideTransformed>();\r\n\r\n  const clearSelection = useCallback(() => {\r\n    setSelectedRide(undefined);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.tableWrapper}>\r\n        <Table>\r\n          <BikeRidesTableHeader />\r\n          <TableBody>\r\n            {data?.data.map((item, index) => (\r\n              <BikeRidesTableRow\r\n                key={`${item.starttime.toISOString()} ${item.bikeid}`}\r\n                ride={item}\r\n                onMouseEnter={setSelectedRide}\r\n                onMouseLeave={clearSelection}\r\n              />\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <div className={classes.mapWrapper}>\r\n        <BikeRidesMap\r\n          rides={data?.data}\r\n          className={classes.map}\r\n          selectedRide={selectedRide}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport BikeRidesView from \"./features/BikeRides/views/BikeRidesView\";\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <BikeRidesView />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}